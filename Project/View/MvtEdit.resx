<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOkAAADiCAMAAACcLhASAAAABGdBTUEAALGPC/xhBQAAAwBQTFRFwsLC
        w8PDxMTExcXFxsbGx8fHyMjIycnJysrKy8vLzMzMzc3Nzs7Oz8/P0NDQ0dHR0tLS09PTAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlf/jtQAAAAlwSFlzAAAO
        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
        TkSuQmCC
</value>
  </data>
</root>